
    processor 6502
    include "vcs.h"
    include "macro.h"
    include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constants segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AlienHeight	equ 16*2
MarineHeight equ 16*2

StandingState equ #00
WalkingState equ #01
ShootingState equ #02
StunnedState equ #3
DeathState equ #4
DeadState equ #5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg.u Variables
    org $80

;The player's X,Y position on the screen
;Playfield range:
;vert range: 0 - 164
;horiz range: 0 - 156
;TODO: clean up playfield range magic numbers
XPos1       .byte
XPos2       .byte
YPos1       .byte
YPos2       .byte

;Which direction the player is facing
;0 = Left
;1 = Right
FaceRight1   .byte
FaceRight2   .byte

;Player states
PlayerState1 .byte
PlayerState2 .byte

PlayerStateTimer1 .byte
PlayerStateTimer2 .byte

;This points at the current sprite being drawn
spritePtr1 .word
spritePtr2 .word

;Pointer to the current color being drawn
spriteColorPtr1 .word
spriteColorPtr2 .word

;The timing of the current animation
animationTiming1 .byte
animationTiming2 .byte

;The number of frames in the current animation
numAnimationFrames1 .byte
numAnimationFrames2 .byte

;The animation timer
currentAnimationTime1 .byte
currentAnimationTime2 .byte

;The current animation frame
currentAnimationFrame1 .byte
currentAnimationFrame2 .byte

;This variable is used to mask the controller input to map to p1 or p2
controllerMask  .byte 

AlienHealth .byte

counter .byte

;scratch variable
Temp .byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Macro that implements Bank Switching trampoline
; X = bank number
; A = hi byte of destination PC
; Y = lo byte of destination PC
    MAC BANK_SWITCH_TRAMPOLINE
        pha             ; push hi byte
        tya             ; Y -> A
        pha             ; push lo byte
        lda $1FF6,x     ; do the bank switch
        rts             ; return to target
    ENDM

; Macro that performs bank switch
    MAC BANK_SWITCH
.Bank   SET {1}
.Addr   SET {2}
        lda #>(.Addr-1)
        ldy #<(.Addr-1)
        ldx #.Bank
        jmp BankSwitch
    ENDM

; Bank prologue that handles reset
; no matter which bank is selected at powerup
; it switches to bank 0 and jumps to Reset_0
    MAC BANK_PROLOGUE
        lda #>(Reset_0-1)
        ldy #<(Reset_0-1)
        ldx #$ff
        txs		; set up stack pointer
        inx		; X = 0
    ENDM

; Bank epilogue -- 6502 vectors
    MAC BANK_VECTORS
        .word Start      ; NMI
        .word Start      ; RESET
        .word Start	 ; BRK
    ENDM

    seg Code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 0

    org  $1000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----

Reset_0
    CLEAN_START
    
    jsr InitializeVariables

NextFrame subroutine

    lsr SWCHB	; test Game Reset switch
    bcc .reset	; reset?

    jmp .continue ;don't reset

.reset

    jsr InitializeVariables

.continue

    ; 1 + 3 lines of VSYNC
    VERTICAL_SYNC

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 35 lines of underscan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TIMER_SETUP 35

    lda #0
    sta RESP0
    sta RESP1
    sta HMP0
    sta HMP1

    ;Increment the frame counter 
    inc counter

    jsr UpdateMarineInput
    jsr UpdateAlienInput

    ;Do the player collition logic
    jsr PlayerAlienCollisionLogic

    ; Switch to Bank 2 routine
    BANK_SWITCH 1,UpdateCurrentSprite

FinishUnderscan
    TIMER_WAIT

    ; Switch to Bank 2 routine
    BANK_SWITCH 1,LinesOfFrame

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 29 lines of overscan
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

OverScan
    TIMER_SETUP 29

    lda $0 ;dont draw the sprite in the overscan
    sta GRP0
    sta COLUP0
    sta GRP1
    sta COLUP1
    TIMER_WAIT
    ; total = 262 lines, go to next frame
    jmp NextFrame




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Initialize all the variables to their default values
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
InitializeVariables subroutine
    ; set to quad
    lda #5
    sta NUSIZ0
    sta NUSIZ1

    ;set the background art
    lda #%00000000
    sta PF0
    sta PF1
    sta PF2

    ;set the background color
    lda #$01
    sta COLUBK

    lda #%00010101 ; make missiles 2x-wide and set player sprites to double
    ;lda #%00011111 ; make missiles 2x-wide and set player sprites to quad
     ;lda #$20 ; make missiles 4x-wide
    sta NUSIZ0
    sta NUSIZ1

    ;lda #%00110000 ;set ball 8x-wide
    lda #%00100000 ;set ball 4x-wide
    sta CTRLPF

    ;set both players to the center horizontally
    lda #58
    sta YPos1

    lda #64
    sta YPos2

    ;set the player 1 x position, right side of screen
    lda #9
    sta XPos1

    ;set the player 2 x position, left side of screen
    lda #147
    sta XPos2

    ;Set the states of the players
    sta PlayerState1
    sta PlayerState2

    ;make both players face right and move in the correct directions
    lda #1
    sta FaceRight1
    lda #0
    sta FaceRight2

    ;reset the counters
    lda #0
    sta counter

    ;reset the pointers
    sta spritePtr1
    sta spritePtr1+1
    sta spritePtr2
    sta spritePtr2+1
    sta spriteColorPtr1
    sta spriteColorPtr1+1
    sta spriteColorPtr2
    sta spriteColorPtr2+1

    ;set all the animation variables
    sta currentAnimationTime1
    sta currentAnimationTime2
    sta currentAnimationFrame1
    sta currentAnimationFrame2
    lda #30
    sta animationTiming1
    sta animationTiming2
    lda #1
    sta numAnimationFrames1
    sta numAnimationFrames2

    lda #0 
    sta Temp

    lda #4
    sta AlienHealth

    lda #0
    sta PlayerStateTimer1
    sta PlayerStateTimer2

    rts



SetCharacter subroutine
    lda counter
    and %00000001
    tay
    rts



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Update Player Movement
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateAlienInput subroutine

    ;dec the state timer
    dec PlayerStateTimer2

    lda #%00001111 ;check p2 joystick
    sta controllerMask

    ldy #1

    ;is teh alien dead?
    lda AlienHealth
    bne .checkStunned

    ;the alien is dee eee dee, ded

    ;check if the player is done dying
    lda PlayerStateTimer2
    bne .gotoDoneUpdatePlayer

    ;hey if it gets here the player is done dying
    lda DeadState
    sta PlayerState2

    jmp .doneUpdatePlayer

.checkStunned

    ;is the alien getting shot?
    lda PlayerState1,y
    cmp StunnedState
    bne .checkHoldingRight

    ;check if the player is done being stunned
    lda PlayerStateTimer2
    bne .gotoDoneUpdatePlayer

    ;hey if it gets here the player is done being stunned
    jmp .checkHoldingRight

.gotoDoneUpdatePlayer
    jmp .doneUpdatePlayer

.checkHoldingRight

    ;Put 0 in the x register to store whether or not the player is walking
    lda #0
    sta Temp

    ;check if the player is holding right
    lda #%10001000	;right?
    and controllerMask
    and SWCHA
    bne .checkHoldingLeft ;if not, go check if holding left

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y

    ;set this var so the player is not set to standing unecessarily
    lda #1
    sta Temp

    ;set the player to facing right
    lda #1
    sta FaceRight1,y

    ;update the players position
    lda XPos1,y
    clc
    adc #1
    sta XPos1,y

    ;TODO: clamp the players position

.checkHoldingLeft

    ;check if the player is holding left
    lda #%01000100	;left?
    and controllerMask
    and SWCHA
    bne .checkHoldingDown ;if not, the player is standing still

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y
    
    lda #1
    sta Temp

    ;set the player to facing left
    lda #0
    sta FaceRight1,y

    ;update the players position
    lda XPos1,y
    sec
    sbc #1
    sta XPos1,y

    ;TODO: clamp the players position

.checkHoldingDown

    ;check if the player is holding down
    lda #%00100010	;down?
    and controllerMask
    and SWCHA
    bne .checkHoldingUp ;Check if the player is walking up

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y
    
    lda #1
    sta Temp

    ;update the players position
    lda YPos1,y
    sec
    sbc #1
    sta YPos1,y

    ;TODO: clamp the players position

.checkHoldingUp

    ;check if the player is holding up
    lda #%00010001	;up?
    and controllerMask
    and SWCHA
    bne .standing ;If it gets here, the player is not walking up

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y
    
    lda #1
    sta Temp

    ;update the players position
    lda YPos1,y
    clc
    adc #1
    sta YPos1,y

    ;TODO: clamp the players position

.standing

    lda Temp
    bne .doneUpdatePlayer

    ;set the player state
    lda StandingState
    sta PlayerState1,y

.doneUpdatePlayer

    rts





UpdateMarineInput subroutine

    ;dec the state timer
    lda PlayerStateTimer1
    bne .updatePlayerTimer
    
    jmp .doneUpdatePlayerTimer

.updatePlayerTimer

    dec PlayerStateTimer1

.doneUpdatePlayerTimer
    lda #%11110000
    sta controllerMask

    ldy #0

.checkPlayerDeath

    lda PlayerState1
    cmp DeathState
    bne .checkPlayerDead

    ;check if the player is done dying
    lda PlayerStateTimer1
    bne .gotoDoneUpdatePlayer

    ;hey if it gets here the player is done dying
    lda DeadState
    sta PlayerState1

    jmp .doneUpdatePlayer

.checkPlayerDead
    lda PlayerState1
    cmp DeadState
    beq .gotoDoneUpdatePlayer

    jmp .checkPlayerShooting

.checkPlayerShooting
    lda PlayerState1
    cmp ShootingState
    bne .checkButtonInput

    ;use player timer to time shots instead of alien
    lda PlayerStateTimer1
    bne .gotoDoneUpdatePlayer

.checkButtonInput

    ;check if the button is being held
    bit INPT4
    bmi .checkHoldRight

    ;set the player to shooting
    lda ShootingState
    sta PlayerState1,y

    ;start the player timer
    lda #30
    sta PlayerStateTimer1

    ;restart the animation
    lda #0
    sta currentAnimationTime1
    sta currentAnimationFrame1

    ;TODO: fire off the gun sound

    ;Check if the player's bullet will hit the alien
    jsr BulletCollisionCheck
    beq .gotoDoneUpdatePlayer

    ;The player's bullet hit the alien!
    jsr AlienGotShot

.gotoDoneUpdatePlayer

    jmp .doneUpdatePlayer

.checkHoldRight

    lda #0
    sta Temp

    ;check if the player is holding right
    lda #%10001000	;right?
    and controllerMask
    and SWCHA
    bne .checkHoldingLeft ;if not, go check if holding left

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y

    lda #1
    sta Temp

    ;set the player to facing right
    lda #1
    sta FaceRight1,y

    ;update the players position
    lda XPos1,y
    clc
    adc #1
    sta XPos1,y

    ;TODO: clamp the players position

.checkHoldingLeft

    ;check if the player is holding left
    lda #%01000100	;left?
    and controllerMask
    and SWCHA
    bne .checkHoldingDown ;if not, the player is standing still

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y

    lda #1
    sta Temp

    ;set the player to facing left
    lda #0
    sta FaceRight1,y

    ;update the players position
    lda XPos1,y
    sec
    sbc #1
    sta XPos1,y

    ;TODO: clamp the players position

.checkHoldingDown

    ;check if the player is holding down
    lda #%00100010	;down?
    and controllerMask
    and SWCHA
    bne .checkHoldingUp ;Check if the player is walking up

    ;if they are:

    ;set the player state
    lda WalkingState
    sta PlayerState1,y
    
    lda #1
    sta Temp

    ;update the players position
    lda YPos1,y
    sec
    sbc #1
    sta YPos1,y

    ;TODO: clamp the players position

.checkHoldingUp

    ;check if the player is holding up
    lda #%00010001	;up?
    and controllerMask
    and SWCHA
    bne .standing ;If it gets here, the player is not walking up

    ;if they are:

    ;set the player statey
    lda WalkingState
    sta PlayerState1,y
    
    lda #1
    sta Temp

    ;update the players position
    lda YPos1,y
    clc
    adc #1
    sta YPos1,y

    ;TODO: clamp the players position

.standing

    lda Temp
    bne .doneUpdatePlayer

    ;set the player state
    lda StandingState
    sta PlayerState1,y

.doneUpdatePlayer

    rts



AlienGotShot subroutine
    ;update the alien health?
    lda PlayerState2
    cmp DeathState
    beq .doneUpdateAlienHealth ;dont update if the alien is dead

    cmp DeadState
    beq .doneUpdateAlienHealth ;dont update if the alien is dead

    cmp StunnedState
    beq .doneUpdateAlienHealth ;dont update if the alien is already stunned

    ;the alien takes a hit
    lda AlienHealth
    sec
    sbc #1
    sta AlienHealth

    ;does that make the alien dead?
    beq .alienDeath

    lda StunnedState
    sta PlayerState2

    lda #30 ;load 30 into the state timer to count down the stun time
    sta PlayerStateTimer2

    ;make sure the animation time is restarted
    lda #0
    sta currentAnimationTime2
    sta currentAnimationFrame2

    jmp .doneUpdateAlienHealth

.alienDeath

    lda DeathState
    sta PlayerState2

    lda #95 ;load 60 into the state timer to count down the dying animation
    sta PlayerStateTimer2
    lda #0
    sta currentAnimationTime2
    sta currentAnimationFrame2

.doneUpdateAlienHealth

    rts



PlayerAlienCollisionLogic subroutine
    ;check if the alien is dead
    lda PlayerState2
    cmp DeadState
    beq .dontKillPlayer

    cmp DeathState
    beq .dontKillPlayer

    ;Check if the characters are colliding
    jsr CheckCharCollision
    beq .dontKillPlayer

    jsr KillPlayer

.dontKillPlayer
    rts




CheckCharCollision subroutine
    ; Check if |XPos1 - XPos2| < width(12)
    sec
    lda XPos1
    sbc XPos2
    bcs .skip1      ; If positive, skip negation
    eor #$FF        ; Negate
    adc #1
.skip1:
    cmp #12          ; width is immediate value
    bcs .noCollision

    ; Check if |YPos1 - YPos2| < height(24)
    sec
    lda YPos1
    sbc YPos2
    bcs .skip2      ; If positive, skip negation
    eor #$FF        ; Negate
    adc #1
.skip2:
    cmp #24         ; height is immediate value
    bcs .noCollision

    ; If we get here, there is a collision
    lda #1
    rts

.noCollision:
    lda #0
    rts




KillPlayer subroutine
    ;is the player already dead
    lda PlayerState1
    cmp DeadState
    beq .alreadyDead

    cmp DeathState
    beq .alreadyDead

    ;set the player to dying
    lda DeathState
    sta PlayerState1

    lda #238 ;load 60 into the state timer to count down the dying animation
    sta PlayerStateTimer1
    lda #0
    sta currentAnimationTime1
    sta currentAnimationFrame1

.alreadyDead
    rts



BulletCollisionCheck subroutine
    ;Check if XPos2 is in the correct direction from XPos1
    lda FaceRight1
    bne .facingRight

    ;check if XPos2 is less than XPos1
    lda XPos2
    cmp XPos1
    bcs .noCollision

    jmp .checkYPos

.facingRight

    ;check if XPos2 is greater than XPos1
    lda XPos2
    cmp XPos1
    bcc .noCollision

.checkYPos

    ; Check if |YPos1 - YPos2| < height(24)
    sec
    lda YPos1
    sbc YPos2
    bcs .skip2      ; If positive, skip negation
    eor #$FF        ; Negate
    adc #1
.skip2:
    cmp #24         ; height is immediate value
    bcs .noCollision

    ; If we get here, there is a collision
    lda #1
    rts

.noCollision:
    lda #0
    rts




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Bank 0 epilogue
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $1FFA
    rorg $FFFA
    BANK_VECTORS

















;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 1: Draw the frame

    org  $2000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----

UpdateCurrentSprite subroutine

    lda counter
    and %00000001
    tay

    ;should we draw the marine or the alien?
    beq .updateMarine

    BANK_SWITCH 2, UpdateAlien

.updateMarine

    BANK_SWITCH 3, UpdateMarine

ReturnUpdateCurrentSprite

    lda counter
    and %00000001
    tay

    jsr FlipPlayerSprite
    jsr UpdatePosition

    ;switch back to bank 0
    BANK_SWITCH 0,FinishUnderscan



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Flip the player sprite if necessary
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FlipPlayerSprite subroutine

    ;flip the player if necessary
    lda FaceRight1,y
    bne .FlipPlayerSpriteRight

    ;Face the player to the left
    lda #%00001000
    sta REFP0
    sta REFP1
    jmp .DoneFlippingPlayerSprite

.FlipPlayerSpriteRight
    lda #0
    sta REFP0
    sta REFP1

.DoneFlippingPlayerSprite

    rts



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Update Player Positions
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdatePosition subroutine

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Set the horizontal screen position of the correct player
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    lda XPos1,y
    ldx #0
    jsr SetHorizPos
    lda XPos1,y
    ldx #1
    jsr SetHorizPos

    sta WSYNC	; sync w/ scanline
    sta HMOVE	; apply fine offsets

    rts



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; SetHorizPos routine
    ; A = X coordinate of the object
    ; X = index of the desired object:
    ;  0: player 1
    ;  1: player 2
    ;  2: missile 1
    ;  3: missile 2
    ;  4: ball
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SetHorizPos subroutine
    sta WSYNC ; start a new line
    sec ; set carry flag
.DivideLoop
    sbc #15 ; subtract 15
    bcs .DivideLoop ; branch until negative
    eor #7 ; calculate fine offset
    asl
    asl
    asl
    asl
    sta RESP0,x ; fix coarse position
    sta HMP0,x ; set fine offset
    rts ; return to caller



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 192 lines of frame
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LinesOfFrame subRoutine

    ;Which player is being drawn this frame?
    lda counter
    and #$01
    beq .drawP1

    ;draw the alien
    BANK_SWITCH 2, DrawAlien

.drawP1

    ;draw the marine
    BANK_SWITCH 3, DrawMarine



    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Bank 1 epilogue
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $2FFA
    rorg $FFFA
    BANK_VECTORS














    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;; BANK 2: Draw the Alien

    org  $3000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----


UpdateAlien subroutine

    lda counter
    and %00000001
    tay

    jsr UpdateAlienSprite
    jsr UpdateAlienAnimation
    BANK_SWITCH 1, ReturnUpdateCurrentSprite



DrawAlien subroutine

    ;is the alien dead?
    lda PlayerState2
    cmp DeadState
    beq .dontDrawingAlien

    lda counter
    and %00000001
    tay

    ;load the Tails coordinate
    lda YPos2
    sta Temp

    ldx #192	; X = 192 scanlines
.LVScan
    txa		; X -> A
    sec		; set carry for subtract
    sbc Temp	; local coordinate
    cmp #AlienHeight ; in sprite?
    bcc .InSprite	; yes, skip over next
    lda #0		; not in sprite, load 0
.InSprite
    lsr        ; Shift right (divide by 2)
    ;lsr        ; Shift right again (divide by 4)
    tay		; local coord -> Y

    lda (spritePtr1),y	; lookup color
    sta WSYNC	; sync w/ scanline
    sta GRP0	; store bitmap
    lda (spriteColorPtr1),y ; lookup color
    sta COLUP0	; store color

    lda (spritePtr2),y	; lookup color
    sta GRP1	; store bitmap
    lda (spriteColorPtr2),y ; lookup color
    sta COLUP1	; store color

    ;Skip to the next line and draw the ring
    sta WSYNC

    dex ;dec twice because we are doing a 2line kernel
    dex
    bne .LVScan	; repeat until 192 lines

    jmp .doneDrawingAlien

.dontDrawingAlien
    ldx #193	; X = 192 scanlines
.skipLVScan
    sta WSYNC
    dex
    bne .skipLVScan	; repeat until 192 lines

.doneDrawingAlien
    ;Switch back to bank0
    BANK_SWITCH 0,OverScan




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; set the player sprite
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateAlienSprite subroutine

    lda counter
    and %00000001
    tay

    ;Check which state the player is in
    lda PlayerState1,y
    cmp WalkingState
    beq .updateWalkingSprite

    cmp StandingState
    beq .jumpUpdateStandingSprite

    cmp StunnedState
    beq .jumpStunnedSprite

    jmp .updateDeathSprite

.jumpUpdateStandingSprite ;out of range!
    jmp .updateStandingSprite

.jumpStunnedSprite ;out of range!
    jmp .updateStunnedSprite

.updateWalkingSprite 

    ;check the health
    lda AlienHealth
    cmp #4
    beq .walking100

    ;set the walking hit color
    ldx #0
    lda #<alienw25Color11
    sta spriteColorPtr1,x
    inx
    lda #>alienw25Color11
    sta spriteColorPtr1,x

    lda AlienHealth
    cmp #3
    beq .walking25

    cmp #2
    beq .walking50

    jmp .walking75

.walking100

    ;set the walking color
    ldx #0
    lda #<alienwalkColor11
    sta spriteColorPtr1,x
    inx
    lda #>alienwalkColor11
    sta spriteColorPtr1,x

    ldx #0
    lda #<alienwalk11
    sta spritePtr1,x
    inx
    lda #>alienwalk11
    sta spritePtr1,x

    lda alienwalkSpeed
    sta animationTiming1,y
    lda alienwalkFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.walking25
    ldx #0
    lda #<alienw2511
    sta spritePtr1,x
    inx
    lda #>alienw2511
    sta spritePtr1,x

    lda alienw25Speed
    sta animationTiming1,y
    lda alienw25Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.walking50
    ldx #0
    lda #<alienw5011
    sta spritePtr1,x
    inx
    lda #>alienw5011
    sta spritePtr1,x

    lda alienw50Speed
    sta animationTiming1,y
    lda alienw50Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.walking75
    ldx #0
    lda #<alienw7511
    sta spritePtr1,x
    inx
    lda #>alienw7511
    sta spritePtr1,x

    lda alienw75Speed
    sta animationTiming1,y
    lda alienw75Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite



.updateStandingSprite

    lda AlienHealth
    cmp #4
    beq .standing100

    ;set the standing hit color
    ldx #0
    lda #<aliens25Color11
    sta spriteColorPtr1,x
    inx
    lda #>aliens25Color11
    sta spriteColorPtr1,x

    lda AlienHealth
    cmp #3
    beq .standing25

    cmp #2
    beq .standing50

    jmp .standing75

.standing100

    ;set the standing color
    ldx #0
    lda #<alienstandingColor11
    sta spriteColorPtr1,x
    inx
    lda #>alienstandingColor11
    sta spriteColorPtr1,x

    ldx #0
    lda #<alienstanding11
    sta spritePtr1,x
    inx
    lda #>alienstanding11
    sta spritePtr1,x

    lda alienstandingSpeed
    sta animationTiming1,y
    lda alienstandingFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.standing25
    ldx #0
    lda #<aliens2511
    sta spritePtr1,x
    inx
    lda #>aliens2511
    sta spritePtr1,x

    lda aliens25Speed
    sta animationTiming1,y
    lda aliens25Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.standing50
    ldx #0
    lda #<aliens5011
    sta spritePtr1,x
    inx
    lda #>aliens5011
    sta spritePtr1,x

    lda aliens50Speed
    sta animationTiming1,y
    lda aliens50Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.standing75
    ldx #0
    lda #<aliens7511
    sta spritePtr1,x
    inx
    lda #>aliens7511
    sta spritePtr1,x

    lda aliens75Speed
    sta animationTiming1,y
    lda aliens75Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite



.updateStunnedSprite

    ;set the stunned color
    ldx #0
    lda #<alienhit25Color11
    sta spriteColorPtr1,x
    inx
    lda #>alienhit25Color11
    sta spriteColorPtr1,x

    lda AlienHealth
    cmp #3
    beq .stunned25

    cmp #2
    beq .stunned50

    jmp .stunned75

.stunned25
    ldx #0
    lda #<alienhit2511
    sta spritePtr1,x
    inx
    lda #>alienhit2511
    sta spritePtr1,x

    lda alienhit25Speed
    sta animationTiming1,y
    lda alienhit25Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.stunned50
    ldx #0
    lda #<alienhit5011
    sta spritePtr1,x
    inx
    lda #>alienhit5011
    sta spritePtr1,x

    lda alienhit50Speed
    sta animationTiming1,y
    lda alienhit50Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.stunned75
    ldx #0
    lda #<alienhit7511
    sta spritePtr1,x
    inx
    lda #>alienhit7511
    sta spritePtr1,x

    lda alienhit75Speed
    sta animationTiming1,y
    lda alienhit75Frames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.updateDeathSprite

    ;set the death color
    ldx #0
    lda #<alienDeathColor11
    sta spriteColorPtr1,x
    inx
    lda #>alienDeathColor11
    sta spriteColorPtr1,x

    ;set the death animation
    ldx #0
    lda #<alienDeath11
    sta spritePtr1,x
    inx
    lda #>alienDeath11
    sta spritePtr1,x

    lda alienDeathSpeed
    sta animationTiming1,y
    lda alienDeathFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.doneUpdatingPlayerSprite
    rts

UpdateAlienAnimation subroutine

    ;don't update the animation if the number of frames is less than 1
    lda numAnimationFrames1,y     ; Load number of frames
    cmp #2                     ; Compare with 2
    bcs .continue               ; Branch if num AnimationFrames >= 2
    jmp .doneUpdatingAnimation ; Skip if num AnimationFrames <= 1

.continue:

    ;Update the animation time 

    ;Increment the current animation time
    lda currentAnimationTime1,y
    clc
    adc #1
    sta currentAnimationTime1,y

    ;Check if it is time to increment the frame
    lda currentAnimationTime1,y ; Load current AnimationTime into accumulator
    cmp animationTiming1,y ; Compare with animationTiming
    bcc .doneUpdatingAnimationTime ; Branch if current AnimationTime < animationTiming

    ; If we get here, current AnimationTime >= animationTiming
    lda #0                     ; Load 0 into accumulator
    sta currentAnimationTime1,y   ; Reset current AnimationTime to 0

    lda currentAnimationFrame1,y
    clc
    adc #1
    sta currentAnimationFrame1,y  ; Increment the animation frame

.doneUpdatingAnimationTime

    ;Update the animation frame

    lda currentAnimationFrame1,y ; Load current frame into accumulator
    cmp numAnimationFrames1,y ; Compare with max frames
    ;beq .doneUpdatingAnimationFrame ; If equal, we're good
    bcc .doneUpdatingAnimationFrame ; Branch if current AnimationFrame < num AnimationFrames

    ; If we get here, current AnimationFrame >= num AnimationFrames
    lda #0 ; Load 0 into accumulator
    sta currentAnimationFrame1,y ; Reset frame back to 0

.doneUpdatingAnimationFrame:

    ;Move the sprite pointer to point to the correct animation frame

    lda currentAnimationFrame1,y  ; Check if frame is 0
    beq .doneUpdatingSpritePointer                  ; If 0, no adding needed

    ldx currentAnimationFrame1,y ; Use X as our frameCounter
    
.addLoop:
    clc                       ; Clear carry before addition
    lda spritePtr1           ; Add 52 to pointer
    adc #32
    sta spritePtr1
    lda spritePtr1+1         ; Add carry to high byte
    adc #0
    sta spritePtr1+1
    
    dex                      ; Decrement frameCounter
    bne .addLoop             ; Keep going if we're not done

.doneUpdatingSpritePointer

.doneUpdatingAnimation

    ;set up rest of the player sprites

    ;Set the second player sprite
    ldx #0
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #16                 ; Add 13 to the value
    sta spritePtr2,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spritePtr2,x

    ;Set the second player color
    ldx #0
    lda spriteColorPtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #16                 ; Point at the color frame
    sta spriteColorPtr2,x
    inx
    lda spriteColorPtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spriteColorPtr2,x

    rts

    include "alien_sprite.asm"
    include "alien_colors.asm"

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Bank 2 epilogue
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $3FFA
    rorg $FFFA
    BANK_VECTORS















    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;; BANK 3: Draw the Marine

    org  $4000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----



UpdateMarine subroutine

    lda counter
    and %00000001
    tay

    jsr UpdateMarineSprite
    jsr UpdateMarineAnimation
    BANK_SWITCH 1, ReturnUpdateCurrentSprite



DrawMarine subroutine

    ;is the marin dead?
    lda PlayerState1
    cmp DeadState
    beq .dontDrawingMarine

    lda counter
    and %00000001
    tay

    ;load the Tails coordinate
    lda YPos1
    sta Temp

    ldx #192	; X = 192 scanlines
.LVScan
    txa		; X -> A
    sec		; set carry for subtract
    sbc Temp	; local coordinate
    cmp #MarineHeight ; in sprite?
    bcc .InSprite	; yes, skip over next
    lda #0		; not in sprite, load 0
.InSprite
    lsr        ; Shift right (divide by 2)
    ;lsr        ; Shift right again (divide by 4)
    tay		; local coord -> Y

    lda (spritePtr1),y	; lookup color
    sta WSYNC	; sync w/ scanline
    sta GRP0	; store bitmap
    lda (spriteColorPtr1),y ; lookup color
    sta COLUP0	; store color

    lda (spritePtr2),y	; lookup color
    sta GRP1	; store bitmap
    lda (spriteColorPtr2),y ; lookup color
    sta COLUP1	; store color

    ;Skip to the next line and draw the ring
    sta WSYNC

    dex ;dec twice because we are doing a 2line kernel
    dex
    bne .LVScan	; repeat until 192 lines

    jmp .doneDrawingMarine

.dontDrawingMarine
    ldx #193	; X = 192 scanlines
.skipLVScan
    sta WSYNC
    dex
    bne .skipLVScan	; repeat until 192 lines

.doneDrawingMarine

    ;Switch back to bank0
    BANK_SWITCH 0,OverScan




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; set the player sprite
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

UpdateMarineSprite subroutine

    lda counter
    and %00000001
    tay

    ;Check which state the player is in
    lda PlayerState1,y
    cmp WalkingState
    beq .updateWalkingSprite

    cmp ShootingState
    beq .updateShootingSprite

    cmp DeathState
    beq .updateDeathSprite

    jmp .updateStandingSprite

.updateWalkingSprite 

    ldx #0
    lda #<ColonialMarineWalking11
    sta spritePtr1,x
    inx
    lda #>ColonialMarineWalking11
    sta spritePtr1,x

    lda ColonialMarineWalkingSpeed
    sta animationTiming1,y
    lda ColonialMarineWalkingFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.updateShootingSprite 

    ldx #0
    lda #<ColonialMarineShooting11
    sta spritePtr1,x
    inx
    lda #>ColonialMarineShooting11
    sta spritePtr1,x

    lda ColonialMarineShootingSpeed
    sta animationTiming1,y
    lda ColonialMarineShootingFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.updateDeathSprite

    ldx #0
    lda #<ColonialMarineDeath11
    sta spritePtr1,x
    inx
    lda #>ColonialMarineDeath11
    sta spritePtr1,x

    lda ColonialMarineDeathSpeed
    sta animationTiming1,y
    lda ColonialMarineDeathFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.updateStandingSprite

    ldx #0
    lda #<ColonialMarineStanding11
    sta spritePtr1,x
    inx
    lda #>ColonialMarineStanding11
    sta spritePtr1,x

    lda ColonialMarineStandingSpeed
    sta animationTiming1,y
    lda ColonialMarineStandingFrames
    sta numAnimationFrames1,y

    jmp .doneUpdatingPlayerSprite

.doneUpdatingPlayerSprite
    rts

UpdateMarineAnimation subroutine

    ;don't update the animation if the number of frames is less than 1
    lda numAnimationFrames1,y     ; Load number of frames
    cmp #2                     ; Compare with 2
    bcs .continue               ; Branch if num AnimationFrames >= 2
    jmp .doneUpdatingAnimation ; Skip if num AnimationFrames <= 1

.continue:

    ;Update the animation time 

    ;Increment the current animation time
    lda currentAnimationTime1,y
    clc
    adc #1
    sta currentAnimationTime1,y

    ;Check if it is time to increment the frame
    lda currentAnimationTime1,y ; Load current AnimationTime into accumulator
    cmp animationTiming1,y ; Compare with animationTiming
    bcc .doneUpdatingAnimationTime ; Branch if current AnimationTime < animationTiming

    ; If we get here, current AnimationTime >= animationTiming
    lda #0                     ; Load 0 into accumulator
    sta currentAnimationTime1,y   ; Reset current AnimationTime to 0

    lda currentAnimationFrame1,y
    clc
    adc #1
    sta currentAnimationFrame1,y  ; Increment the animation frame

.doneUpdatingAnimationTime

    ;Update the animation frame

    lda currentAnimationFrame1,y ; Load current frame into accumulator
    cmp numAnimationFrames1,y ; Compare with max frames
    ;beq .doneUpdatingAnimationFrame ; If equal, we're good
    bcc .doneUpdatingAnimationFrame ; Branch if current AnimationFrame < num AnimationFrames

    ; If we get here, current AnimationFrame >= num AnimationFrames
    lda #0 ; Load 0 into accumulator
    sta currentAnimationFrame1,y ; Reset frame back to 0

.doneUpdatingAnimationFrame:

    ;Move the sprite pointer to point to the correct animation frame

    lda currentAnimationFrame1,y  ; Check if frame is 0
    beq .doneUpdatingSpritePointer                  ; If 0, no adding needed

    ldx currentAnimationFrame1,y ; Use X as our frameCounter
    
.addLoop:
    clc                       ; Clear carry before addition
    lda spritePtr1           ; Add 52 to pointer
    adc #64
    sta spritePtr1
    lda spritePtr1+1         ; Add carry to high byte
    adc #0
    sta spritePtr1+1
    
    dex                      ; Decrement frameCounter
    bne .addLoop             ; Keep going if we're not done

.doneUpdatingSpritePointer

.doneUpdatingAnimation

    ;set up rest of the player sprites

    ;Set the second player sprite
    ldx #0
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #16                 ; Add 13 to the value
    sta spritePtr2,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spritePtr2,x

    ;Set the player color
    ldx #0
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #32                 ; Point at the color frame
    sta spriteColorPtr1,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spriteColorPtr1,x

    ;Set the second player color
    ldx #0
    lda spritePtr1,x        ; Load the low byte value
    clc                     ; Clear carry before addition
    adc #48                 ; Point at the color frame
    sta spriteColorPtr2,x
    inx
    lda spritePtr1,x        ; Load the high byte value
    adc #0                  ; Add carry if it occurred from low byte addition
    sta spriteColorPtr2,x

    rts

    include "ColonialMarine_sprite.asm"




    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Bank 3 epilogue
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $4FFA
    rorg $FFFA
    BANK_VECTORS
