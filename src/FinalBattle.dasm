
    processor 6502
    include "vcs.h"
    include "macro.h"
    include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg.u Variables
    org $80

    include "Variables.dasm"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Macro that implements Bank Switching trampoline
; X = bank number
; A = hi byte of destination PC
; Y = lo byte of destination PC
    MAC BANK_SWITCH_TRAMPOLINE
        pha             ; push hi byte
        tya             ; Y -> A
        pha             ; push lo byte
        lda $1FF6,x     ; do the bank switch
        rts             ; return to target
    ENDM

; Macro that performs bank switch
    MAC BANK_SWITCH
.Bank   SET {1}
.Addr   SET {2}
        lda #>(.Addr-1)
        ldy #<(.Addr-1)
        ldx #.Bank
        jmp BankSwitch
    ENDM

; Bank prologue that handles reset
; no matter which bank is selected at powerup
; it switches to bank 0 and jumps to Reset_0
    MAC BANK_PROLOGUE
        lda #>(Reset_0-1)
        ldy #<(Reset_0-1)
        ldx #$ff
        txs		; set up stack pointer
        inx		; X = 0
    ENDM

; Bank epilogue -- 6502 vectors
    MAC BANK_VECTORS
        .word Start      ; NMI
        .word Start      ; RESET
        .word Start	 ; BRK
    ENDM

    seg Code

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 0

    org  $1000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----

Reset_0

    CLEAN_START ;Macro to initialize several flags and registers, safely clears memory and TIA
    
    ;start a new game
    jsr ResetGame

NextFrame subroutine

    VERTICAL_SYNC

    ; 37 lines of underscan
    TIMER_SETUP 36
    
    lda #0
    sta RESP0
    sta RESP1
    sta HMP0
    sta HMP1

    inc counter

    ;switch between p1 and p2
    jsr SetPlayerCounter

    tya
    bne .setP2ControllerMask
    lda #%11110000 ;this mask is used by the MoveJoystick routine to check p1 joystick
    sta controllerMask
    jmp .doneSettingControllerMask
.setP2ControllerMask
    lda #%00001111 ;check p2 joystick
    sta controllerMask
.doneSettingControllerMask

    jsr CheckInput ;update the input
    jsr CharacterUpdate ;update the players state

    ;Set teh animation of the player
    jsr SetPlayerAnimation
    jsr UpdateAnimation

    ;position the player horizontally
    lda XPos1,y
    ldx #0
    jsr SetHorizPos
    lda XPos1,y
    adc #31
    ldx #1
    jsr SetHorizPos

    sta WSYNC ;sync w/ scanline
    sta HMOVE ;apply fine offsets

    ; it's ok if we took an extra scanline because
    ; the PIA timer will always count 37 lines
    ; wait for end of underscan
    TIMER_WAIT

    ; disable VBLANK and release the TIA to generaqte some color
    sta VBLANK

;Draw the 192 scanlines

    tya
    beq .drawLoader

    BANK_SWITCH 2,DrawAlienQueen

.drawLoader
    BANK_SWITCH 1,DrawLoader

DoneDrawing
    jsr SetPlayerCounter





; Reenable VBLANK for bottom (and top of next frame)
    lda #2
    sta VBLANK

; 30 lines of overscan
    TIMER_SETUP 30
    
    jsr UpdateGameLogic
    
    TIMER_WAIT

;total = 262 lines, go to next frame
    jmp NextFrame



; SetHorizPos routine
; A = X coordinate
; X = player number (0 or 1)
SetHorizPos subroutine
    sta WSYNC ;start a new line
    sec ;set carry flag
.divideLoop
    sbc #15 ;subtract 15
    bcs .divideLoop ;branch until negative
    eor #7 ;calculate fine offset
    asl
    asl
    asl
    asl
    sta RESP0,x ;fix coarse position
    sta HMP0,x ;set fine offset
    rts ;return to caller



ResetGame

    lda #0
    sta counter

    ;Make the players double-wide
    lda #07
    sta NUSIZ0
    sta NUSIZ1

    ; set up initial positions
    lda #20 ;p1 position
    sta XPos1
    lda #95 ;p2 position
    sta XPos2

    ;set the input up
    lda #0
    sta gameOver
    sta p1State
    sta p2State
    sta p1Timer
    sta p2Timer
    sta p1PrevInput
    sta p2PrevInput
    sta p1Input
    sta p2Input

    ;set all the animation variables
    sta currentAnimationTime1
    sta currentAnimationTime2
    sta currentAnimationFrame1
    sta currentAnimationFrame2
    lda #30
    sta animationTiming1
    sta animationTiming2
    lda #1
    sta numAnimationFrames1
    sta numAnimationFrames2

    lda #0
    sta COLUBK ;reset the background color to black to start our new frame
    sta COLUPF ;reset teh foreground color to black to start the new frame
    sta PF0 ;set the pf0 playfield register
    sta PF1 ;set the pf1 playfield register
    sta PF2 ;set the pf2 playfield register

    rts



SetPlayerCounter
    lda counter
    and %00000001
    tay
    rts



CheckInput subroutine
    ;copy current input to prev
    lda p1Input,y
    sta p1PrevInput,y

    ;blank out the current input
    lda #0
    sta p1Input,y

.checkDown
    ;check if the down direction is being held
    lda #%00100010	;down?
    and controllerMask
    bit SWCHA
    bne .checkUp

    ;set the down flag for the current input
    lda p1Input,y
    ora #CONTROLLER_DOWN
    sta p1Input,y

.checkUp
    ;check if the up direction is being held
    lda #%00010001	;Up?
    and controllerMask
    bit SWCHA
    bne .checkLeft

    ;set the up flag for teh current input
    lda p1Input,y
    ora #CONTROLLER_UP
    sta p1Input,y

.checkLeft
    ;check if the left direction is being held
    lda #%01000100	;left?
    and controllerMask
    bit SWCHA
    bne .checkRight

    ;set the "left" flag for teh current input
    lda p1Input,y
    ora #CONTROLLER_LEFT
    sta p1Input,y

.checkRight
    ;check if the left direction is being held
    lda #%10001000	;right?
    and controllerMask
    bit SWCHA
    bne .checkButton

    ;set the "right" flag for teh current input
    lda p1Input,y
    ora #CONTROLLER_RIGHT
    sta p1Input,y

.checkButton
    ;are we checking p1 or p2? There is a different register depending on which one.
    tya
    bne .checkP2Button

.checkP1Button
    lda #%10000000 ;Check if the button is pressed on the first controller
    bit INPT4
    beq .setButtonFlag
    jmp .doneCheckingInput

.checkP2Button
    lda #%10000000 ;Check if the button is pressed on the second controller
    bit INPT5
    beq .setButtonFlag
    jmp .doneCheckingInput

.setButtonFlag
    ;set the "button" flag for teh current input
    lda p1Input,y
    ora #CONTROLLER_BUTTON
    sta p1Input,y

.doneCheckingInput
    rts



MovePlayer
.checkMoveLeft
    ;load the player's position to the X register
    ldx XPos1,y

    ;load the player's input to the accumulator
    lda p1Input,y

    ;Check if the left direction is being held down
    and #CONTROLLER_LEFT
    beq .checkMoveRight

    ;Dont walk off the left side of teh screen
    cpx #LEFT_SIDE
    bcc .checkMoveRight

    ;Move left
    dex

    ;Set the player state to walking
    jmp .changePlayerToWalking

.checkMoveRight
    ;Check if the "right" direction is being held down
    lda p1Input,y
    and #CONTROLLER_RIGHT
    beq .changePlayerToStanding

    ;Dont walk off the right side of teh screen
    cpx #RIGHT_SIDE
    bcs .changePlayerToStanding

    ;move right!
    inx 

.changePlayerToWalking
    ;is the player standing?
    lda p1State,y
    cmp #STANDING_STATE
    bne .doneMovingPlayer

    ;Set the player's state to walking
    lda #WALKING_STATE
    sta p1State,y

    jsr RestartAnimation

    ;restart the timer
    lda $FF
    sta p1Timer,y

    jmp .doneMovingPlayer

.changePlayerToStanding
    lda #STANDING_STATE
    sta p1State,y

.doneMovingPlayer
    ;set the player's new position
    stx XPos1,y
    rts



CharacterUpdate subroutine

    jsr SetPlayerColor

    ;Decrement the timer on every character update
    ldx p1Timer,y
    dex
    stx p1Timer,y

    ;check if the game is over
    lda gameOver
    cmp #01
    bne .checkStanding

    ;check if the player is dead
    lda p1State,y
    cmp #DEAD_STATE
    bne .jumpToDoneUpdatingPlayerState

    ;Toggle the color to the blood if required
    ;AND teh game over timer with 16, if it is 0, set the player to neutral color
    lda gameOverTimer
    and #BLOOD_TIME
    bne .toggleBloodyColor

    jsr .toggleBloodyColor1
    jmp .doneUpdatingPlayerState

.toggleBloodyColor
    ;which player?
    tya
    beq .toggleP1Bloody

    ldx #02
    jsr SetBloodyColor
    jmp .doneUpdatingPlayerState

.toggleP1Bloody
    ldx #00
    jsr SetBloodyColor
    jmp .doneUpdatingPlayerState

.toggleBloodyColor1
    ;which player?
    tya
    beq .toggleP1Bloody1

    ldx #02
    jsr SetBloodyColor1
    jmp .doneUpdatingPlayerState

.toggleP1Bloody1
    ldx #00
    jsr SetBloodyColor1
    jmp .doneUpdatingPlayerState

.jumpToDoneUpdatingPlayerState
    jmp .doneUpdatingPlayerState

.checkStanding  
    ;Check if the player is standing
    lda p1State,y
    cmp #STANDING_STATE
    beq .checkStandingWalkingInput

    ;Check if the player is walking
    cmp #WALKING_STATE
    bne .checkBeginAttacking

.checkStandingWalkingInput
    ;check for the button press
    lda p1Input,y ;is the button currently held?
    and #CONTROLLER_BUTTON
    beq .doneCheckingButtonPress

    ;The down direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    and #CONTROLLER_BUTTON
    beq .doneCheckingButtonPress

    ;change the state to "begin attacking"
    lda #BEGIN_ATTACK_STATE
    sta p1State,y

    jsr RestartAnimation

    ;restart the timer
    lda #BEGIN_ATTACK_TIME
    sta p1Timer,y

    jmp .doneUpdatingPlayerState

.doneCheckingButtonPress

    ;check for down press
    lda p1Input,y ;is the down direction currently held?
    and #CONTROLLER_DOWN
    beq .doneCheckingDownPress

    ;The down direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    and #CONTROLLER_DOWN
    beq .doneCheckingDownPress

    ;change the state to blocking
    lda #BLOCKING_STATE
    sta p1State,y

    jsr RestartAnimation

    ;restart the timer
    lda #BLOCK_TIME
    sta p1Timer,y

    jmp .doneUpdatingPlayerState

.doneCheckingDownPress

    ;Move the player depending on the current input
    jsr MovePlayer

    jmp .doneUpdatingPlayerState

.checkBeginAttacking

    lda p1State,y
    cmp #BEGIN_ATTACK_STATE
    bne .checkAttacking

    ;check if the "up" direction was pressed
    lda p1Input,y ;is the up direction currently held?
    and #CONTROLLER_UP
    beq .doneCheckingUpPress

    ;The up direction is currently being held, but is it a new input?
    eor p1PrevInput,y
    and #CONTROLLER_UP
    beq .doneCheckingUpPress

    ;The player cancelled, change the state to standing
    lda #STANDING_STATE
    sta p1State,y

    jmp .doneUpdatingPlayerState

.doneCheckingUpPress

    ;check if the timer is done
    lda p1Timer,y
    bne .doneUpdatingPlayerState

    ;Change state to attacking
    lda #ATTACKING_STATE
    sta p1State,y

    jsr RestartAnimation

    ;start the timer
    lda #ATTACK_TIME
    sta p1Timer,y

    jmp .doneUpdatingPlayerState

.checkAttacking

    lda p1State,y
    cmp #ATTACKING_STATE
    bne .checkBlocking

    ;check if the timer is done
    lda p1Timer,y
    bne .doneUpdatingPlayerState

    ;Change to the standing state
    lda #STANDING_STATE
    sta p1State,y

    jmp .doneUpdatingPlayerState

.checkBlocking

    lda p1State,y
    cmp #BLOCKING_STATE
    bne .checkKnockback

    ;check if the timer is done
    lda p1Timer,y
    bne .doneUpdatingPlayerState

    ;Change to the standing state
    lda #STANDING_STATE
    sta p1State,y

    jmp .doneUpdatingPlayerState

.checkKnockback

    lda p1State,y
    cmp #KNOCKBACK_STATE
    bne .doneUpdatingPlayerState

    ;Scoot the player backwards while they are in knockback state
    ldx XPos1,y ;load the player's position so we can check to not kncok them off screen
    tya
    ;check which player is being knocked back
    bne .scootBackPlayer2

    ;scoot back player 1
    cpx #LEFT_SIDE
    bcc .doneScootingBack

    ;Move left
    dex
    stx XPos1,y
    jmp .doneScootingBack

.scootBackPlayer2

    ;scoot back player 2
    cpx #RIGHT_SIDE
    bcs .doneScootingBack

    ;move right!
    inx 
    stx XPos1,y

.doneScootingBack
    ;check if the timer is done
    lda p1Timer,y
    bne .doneUpdatingPlayerState

    ;Change to the standing state
    lda #STANDING_STATE
    sta p1State,y

    jmp .doneUpdatingPlayerState

.doneUpdatingPlayerState
    rts



RestartAnimation
    lda #0
    sta currentAnimationTime1,y
    sta currentAnimationFrame1,y
    rts



SetPlayerAnimation subroutine
    tya
    beq .setLoaderAnimation

.setAlienQueenAnimation
    BANK_SWITCH 2,SetAlienQueenAnimation

.setLoaderAnimation
    BANK_SWITCH 1,SetLoaderAnimation

DoneSettingPlayerAnimation
    jsr SetPlayerCounter
    rts



UpdateAnimation subroutine
    tya
    beq .updateLoaderAnimation

.updateAlienQueenAnimation
    BANK_SWITCH 2,UpdateAlienQueenAnimation

.updateLoaderAnimation
    BANK_SWITCH 1,UpdateLoaderAnimation

DoneUpdateAnimation
    jsr SetPlayerCounter
    rts



SetPlayerColor subroutine
    ;Set the player colors to their neutral color
    tya
    beq .setLoaderColor

.setAlienQueenColor
    BANK_SWITCH 2,SetAlienQueenColor

.setLoaderColor
    BANK_SWITCH 1,SetLoaderColor

DoneSettingPlayerColor
    jsr SetPlayerCounter
    rts


SetBloodyColor
    tya
    beq .setLoaderColorBlood

.setAlienQueenColorBlood
    BANK_SWITCH 2,SetAlienQueenColorBlood

.setLoaderColorBlood
    BANK_SWITCH 1,SetLoaderColorBlood

DoneSetBloodyColor
    jsr SetPlayerCounter
    rts



SetBloodyColor1
    tya
    beq .setLoaderColorBlood1

.setAlienQueenColorBlood1
    BANK_SWITCH 2,SetAlienQueenColorBlood1

.setLoaderColorBlood1
    BANK_SWITCH 1,SetLoaderColorBlood1

DoneSetBloodyColor1
    jsr SetPlayerCounter
    rts



UpdateGameLogic subroutine
    ;check if the game is over
    lda gameOver
    cmp #01
    beq .gameOverState

    ;check how close the players are
    lda XPos1     ; Load the value of XPos1 into the accumulator
    cmp XPos2     ; Compare XPos1 with XPos2
    bcc .XPos2Greater ; If XPos1 is less than XPos2, branch to XPos2Greater

    jmp .XPos1GreaterOrEqual
    
.gameOverState
    ;The game is over!

    ;Decrement the game over timer
    ldx gameOverTimer
    dex
    stx gameOverTimer
    txa
    cmp #0
    bne .jumpToDoneUpdating

    ;the game is over, we've wantched the loser flash red, restart the game
    jsr ResetGame

.jumpToDoneUpdating
    jmp .doneUpdatingGameLogic

.XPos1GreaterOrEqual:
    lda XPos1
    sbc XPos2     ; Subtract XPos2 from the accumulator
    cmp #ATTACK_DISTANCE       ; Compare the result with 64
    bcc .closeEnough  ; If result is less than 64, branch to LessThan
    jmp .doneUpdatingGameLogic      ; Jump to Done if result is greater or equal to 64

.XPos2Greater:
    lda XPos2
    sbc XPos1
    cmp #ATTACK_DISTANCE
    bcc .closeEnough
    jmp .doneUpdatingGameLogic

.closeEnough
    ;is p1 attacking
    lda p1State
    cmp #ATTACKING_STATE
    bne .checkPlayer2GameLogic

    ;is p2 blocking
    lda p2State
    cmp #BLOCKING_STATE
    bne .checkP2Attacking

    ;Player 1 has been bounced back
    ldy 0
    jmp .bouncePlayer

.checkP2Attacking
    ;is p2 attacking or begin attacking
    cmp #ATTACKING_STATE
    bne .checkP2BeginAttacking

    ;Both players are attacking, bounce them both
    jmp .setDoubleBounce

.checkP2BeginAttacking
    cmp #BEGIN_ATTACK_STATE
    bne .killP2

    ;Both players are attacking, bounce them both
    jmp .setDoubleBounce

.killP2
    ;p2 has been killed
    ldy 1
    jmp .killPlayer

.checkPlayer2GameLogic
    ;is p2 attacking
    lda p2State
    cmp #ATTACKING_STATE
    bne .doneUpdatingGameLogic

    ;is p1 blocking
    lda p1State
    cmp #BLOCKING_STATE
    bne .checkP1BeginAttacking

    ;Player 2 has been bounced back
    ldy 1
    jmp .bouncePlayer

.checkP1BeginAttacking
    ;is p1 begin attacking
    cmp #BEGIN_ATTACK_STATE
    bne .killP1

    ;Both players are attacking, bounce them both
    jmp .setDoubleBounce

.killP1
    ;p1 has been killed
    ldy 0
    jmp .killPlayer

.killPlayer
    ;set teh game to over
    lda #01
    sta gameOver 

    ;start the game over timer
    lda #$FF
    sta gameOverTimer

    ;set the player to dead
    lda #DEAD_STATE
    sta p1State,y

    ;set the players timer
    lda #01
    sta p1Timer,y
    jmp .doneUpdatingGameLogic

.bouncePlayer
    ;Set the player to being knocked back
    lda #KNOCKBACK_STATE
    sta p1State,y

    jsr RestartAnimation

    ;Set the player's timer
    lda #KNOCKBACK_TIME
    sta p1Timer,y

    jmp .doneUpdatingGameLogic

.setDoubleBounce
    ;The game is in a state where both players are getting bounced
    ldy 0
    jsr .bouncePlayer

    ldy 1
    jsr .bouncePlayer

.doneUpdatingGameLogic
    rts



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bank 0 epilogue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $1FFA
    rorg $FFFA
    BANK_VECTORS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 1: Draw the Loader

    org  $2000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----

    include "Loader.dasm"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bank 1 epilogue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $2FFA
    rorg $FFFA
    BANK_VECTORS



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 2: Draw the Alien Queen

    org  $3000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----

    include "AlienQueen.dasm"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bank 2 epilogue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $3FFA
    rorg $FFFA
    BANK_VECTORS




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BANK 3: Empty!!!

    org  $4000
    rorg $F000
;----The following code is the same on both banks----
Start
    BANK_PROLOGUE
BankSwitch
    BANK_SWITCH_TRAMPOLINE
;----End of bank-identical code----



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Bank 3 epilogue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    org  $4FFA
    rorg $FFFA
    BANK_VECTORS
